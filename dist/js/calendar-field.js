// resources/js/calendar-field.js
function calendarField({
  events = [],
  eventContent = null,
  selectable = false
}) {
  return {
    init: async function() {
      let self = this;
      console.log("Initialize");
      let options = {
        view: "dayGridMonth",
        events,
        locale: "cs",
        firstDay: 1,
        // eventClick: (info) => this.$wire.test(info)
        eventClick: (info) => console.log(info),
        dateClick: () => {
          console.log("No events click");
        }
      };
      if (eventContent !== null) {
        options.eventContent = (info) => {
          return {
            html: self.getEventContent(info)
          };
        };
      }
      if (selectable) {
        options.selectable = true;
      }
      this.ec = new EventCalendar(document.getElementById("calendar"), options);
      window.addEventListener("ec-add-event", this.addEvent);
    },
    addEvent: function(event) {
      this.ec.addEvent(event);
    },
    getEventContent: function(info) {
      let container = document.createElement("div");
      container.innerHTML = eventContent;
      container.setAttribute("x-data", JSON.stringify(info));
      return container.outerHTML;
    },
    // Function to perform replacements
    replacePlaceholders: function(element, replacements, parentKey = "") {
      Object.keys(replacements).forEach((key) => {
        const nestedKey = parentKey ? `${parentKey}.${key}` : key;
        const value = replacements[key];
        if (typeof value === "object") {
          this.replacePlaceholders(element, value, nestedKey);
        } else {
          const placeholder = `{${nestedKey}}`;
          element.innerHTML = element.innerHTML.replace(new RegExp(placeholder, "g"), value);
        }
      });
    }
  };
}
export {
  calendarField as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWZpZWxkLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxlbmRhckZpZWxkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudENvbnRlbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGFibGUgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGluaXQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXplJyk7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICB2aWV3OiAnZGF5R3JpZE1vbnRoJyxcbiAgICAgICAgICAgICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgICAgICAgICAgICBsb2NhbGU6ICdjcycsXG4gICAgICAgICAgICAgICAgZmlyc3REYXk6IDEsXG4gICAgICAgICAgICAgICAgLy8gZXZlbnRDbGljazogKGluZm8pID0+IHRoaXMuJHdpcmUudGVzdChpbmZvKVxuICAgICAgICAgICAgICAgIGV2ZW50Q2xpY2s6IChpbmZvKSA9PiBjb25zb2xlLmxvZyhpbmZvKSxcbiAgICAgICAgICAgICAgICBkYXRlQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIGV2ZW50cyBjbGljaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChldmVudENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmV2ZW50Q29udGVudCA9IChpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBzZWxmLmdldEV2ZW50Q29udGVudChpbmZvKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5lYyA9IG5ldyBFdmVudENhbGVuZGFyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWxlbmRhcicpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlYy1hZGQtZXZlbnQnLCB0aGlzLmFkZEV2ZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWMuYWRkRXZlbnQoZXZlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEV2ZW50Q29udGVudDogZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBldmVudENvbnRlbnQ7XG4gICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSByZXBsYWNlbWVudHNcbiAgICAgICAgICAgIC8vIHRoaXMucmVwbGFjZVBsYWNlaG9sZGVycyhjb250YWluZXIsIGluZm8pO1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgneC1kYXRhJywgSlNPTi5zdHJpbmdpZnkoaW5mbykpO1xuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIG1vZGlmaWVkIEhUTUxcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIub3V0ZXJIVE1MO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIHBlcmZvcm0gcmVwbGFjZW1lbnRzXG4gICAgICAgIHJlcGxhY2VQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChlbGVtZW50LCByZXBsYWNlbWVudHMsIHBhcmVudEtleSA9ICcnKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhyZXBsYWNlbWVudHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXN0ZWRLZXkgPSBwYXJlbnRLZXkgPyBgJHtwYXJlbnRLZXl9LiR7a2V5fWAgOiBrZXk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXBsYWNlbWVudHNba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlIGlzIGFuIG9iamVjdCwgcGVyZm9ybSByZWN1cnNpdmUgcmVwbGFjZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZVBsYWNlaG9sZGVycyhlbGVtZW50LCB2YWx1ZSwgbmVzdGVkS2V5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGB7JHtuZXN0ZWRLZXl9fWA7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudC5pbm5lckhUTUwucmVwbGFjZShuZXcgUmVnRXhwKHBsYWNlaG9sZGVyLCAnZycpLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixjQUErQjtBQUFBLEVBQ1EsU0FBUyxDQUFDO0FBQUEsRUFDVixlQUFlO0FBQUEsRUFDZixhQUFhO0FBQ2pCLEdBQUc7QUFDekMsU0FBTztBQUFBLElBRUgsTUFBTSxpQkFBa0I7QUFDcEIsVUFBSSxPQUFPO0FBQ1gsY0FBUSxJQUFJLFlBQVk7QUFDeEIsVUFBSSxVQUFVO0FBQUEsUUFDVixNQUFNO0FBQUEsUUFDTjtBQUFBLFFBQ0EsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBO0FBQUEsUUFFVixZQUFZLENBQUMsU0FBUyxRQUFRLElBQUksSUFBSTtBQUFBLFFBQ3RDLFdBQVcsTUFBTTtBQUNiLGtCQUFRLElBQUksaUJBQWlCO0FBQUEsUUFDakM7QUFBQSxNQUNKO0FBRUEsVUFBSSxpQkFBaUIsTUFBTTtBQUN2QixnQkFBUSxlQUFlLENBQUMsU0FBUztBQUM3QixpQkFBTztBQUFBLFlBQ0gsTUFBTSxLQUFLLGdCQUFnQixJQUFJO0FBQUEsVUFDbkM7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUVBLFVBQUksWUFBWTtBQUNaLGdCQUFRLGFBQWE7QUFBQSxNQUN6QjtBQUVBLFdBQUssS0FBSyxJQUFJLGNBQWMsU0FBUyxlQUFlLFVBQVUsR0FBRyxPQUFPO0FBQ3hFLGFBQU8saUJBQWlCLGdCQUFnQixLQUFLLFFBQVE7QUFBQSxJQUN6RDtBQUFBLElBRUEsVUFBVSxTQUFTLE9BQU87QUFDdEIsV0FBSyxHQUFHLFNBQVMsS0FBSztBQUFBLElBQzFCO0FBQUEsSUFFQSxpQkFBaUIsU0FBVSxNQUFNO0FBQzdCLFVBQUksWUFBWSxTQUFTLGNBQWMsS0FBSztBQUM1QyxnQkFBVSxZQUFZO0FBR3RCLGdCQUFVLGFBQWEsVUFBVSxLQUFLLFVBQVUsSUFBSSxDQUFDO0FBR3JELGFBQU8sVUFBVTtBQUFBLElBQ3JCO0FBQUE7QUFBQSxJQUdBLHFCQUFxQixTQUFVLFNBQVMsY0FBYyxZQUFZLElBQUk7QUFDbEUsYUFBTyxLQUFLLFlBQVksRUFBRSxRQUFRLFNBQU87QUFDckMsY0FBTSxZQUFZLFlBQVksR0FBRyxTQUFTLElBQUksR0FBRyxLQUFLO0FBQ3RELGNBQU0sUUFBUSxhQUFhLEdBQUc7QUFFOUIsWUFBSSxPQUFPLFVBQVUsVUFBVTtBQUUzQixlQUFLLG9CQUFvQixTQUFTLE9BQU8sU0FBUztBQUFBLFFBQ3RELE9BQU87QUFFSCxnQkFBTSxjQUFjLElBQUksU0FBUztBQUNqQyxrQkFBUSxZQUFZLFFBQVEsVUFBVSxRQUFRLElBQUksT0FBTyxhQUFhLEdBQUcsR0FBRyxLQUFLO0FBQUEsUUFDckY7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
