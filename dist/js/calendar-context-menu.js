// resources/js/calendar-context-menu.js
function calendarContextMenu({
  calendar = null
}) {
  return {
    open: false,
    // contextMenu: null,
    size: {
      width: 0,
      height: 0
    },
    position: {
      x: 0,
      y: 0
    },
    mountData: {
      start: null,
      end: null
    },
    menu: {
      ["x-show"]() {
        return this.open;
      },
      ["x-bind:style"]() {
        return `
                position: absolute;
                z-index: 40;
                top: ${this.position.y}px;
                left: ${this.position.x}px;
                `;
      },
      ["x-on:click.away"]() {
        this.closeMenu();
      }
    },
    init: async function() {
      console.log("init context menu");
      const menu = this.$el.querySelector('[x-bind="menu"]');
      this.size = {
        width: menu.offsetWidth,
        height: menu.offsetHeight
      };
      this.$el.addEventListener("calendar--open-menu", (event) => this.openMenu(event));
    },
    openMenu: function(event) {
      this.mountData = {
        start: event.detail.start,
        end: event.detail.end
      };
      this.$nextTick(() => {
        const clientX = event.detail.jsEvent.clientX;
        const clientY = event.detail.jsEvent.clientY;
        const pageX = event.detail.jsEvent.pageX;
        const pageY = event.detail.jsEvent.pageY;
        const offsetX = clientX + this.size.width > window.innerWidth ? clientX + this.size.width - window.innerWidth : 0;
        const offsetY = clientY + this.size.height > window.innerHeight ? clientY + this.size.height - window.innerHeight : 0;
        this.position.x = pageX - offsetX;
        this.position.y = pageY - offsetY;
        this.open = true;
      });
    },
    closeMenu: function() {
      this.open = false;
    }
  };
}
export {
  calendarContextMenu as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWNvbnRleHQtbWVudS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsZW5kYXJDb250ZXh0TWVudSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhciA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAvLyBjb250ZXh0TWVudTogbnVsbCxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgbW91bnREYXRhOiB7XG4gICAgICAgICAgICBzdGFydDogbnVsbCxcbiAgICAgICAgICAgIGVuZDogbnVsbCxcbiAgICAgICAgfSxcblxuICAgICAgICBtZW51OiB7XG4gICAgICAgICAgICBbJ3gtc2hvdyddKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbJ3gtYmluZDpzdHlsZSddKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHotaW5kZXg6IDQwO1xuICAgICAgICAgICAgICAgIHRvcDogJHt0aGlzLnBvc2l0aW9uLnl9cHg7XG4gICAgICAgICAgICAgICAgbGVmdDogJHt0aGlzLnBvc2l0aW9uLnh9cHg7XG4gICAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbJ3gtb246Y2xpY2suYXdheSddKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VNZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luaXQgY29udGV4dCBtZW51Jyk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCdbeC1iaW5kPVwibWVudVwiXScpO1xuICAgICAgICAgICAgdGhpcy5zaXplID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBtZW51Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogbWVudS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCdjYWxlbmRhci0tb3Blbi1tZW51JywgKGV2ZW50KSA9PiB0aGlzLm9wZW5NZW51KGV2ZW50KSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3Blbk1lbnU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdGhpcy5tb3VudERhdGEgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGV2ZW50LmRldGFpbC5zdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGV2ZW50LmRldGFpbC5lbmQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFggPSBldmVudC5kZXRhaWwuanNFdmVudC5jbGllbnRYO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFkgPSBldmVudC5kZXRhaWwuanNFdmVudC5jbGllbnRZO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VYID0gZXZlbnQuZGV0YWlsLmpzRXZlbnQucGFnZVg7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZVkgPSBldmVudC5kZXRhaWwuanNFdmVudC5wYWdlWTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBjbGllbnRYICsgdGhpcy5zaXplLndpZHRoID4gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgPyBjbGllbnRYICsgdGhpcy5zaXplLndpZHRoIC0gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSBjbGllbnRZICsgdGhpcy5zaXplLmhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgICAgICAgICAgICA/IGNsaWVudFkgKyB0aGlzLnNpemUuaGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogMDtcblxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHBhZ2VYIC0gb2Zmc2V0WDtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSBwYWdlWSAtIG9mZnNldFk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixvQkFBcUM7QUFBQSxFQUNJLFdBQVc7QUFDZixHQUFHO0FBQzNDLFNBQU87QUFBQSxJQUVILE1BQU07QUFBQTtBQUFBLElBRU4sTUFBTTtBQUFBLE1BQ0YsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBLElBQ1o7QUFBQSxJQUNBLFVBQVU7QUFBQSxNQUNOLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxJQUNQO0FBQUEsSUFDQSxXQUFXO0FBQUEsTUFDUCxPQUFPO0FBQUEsTUFDUCxLQUFLO0FBQUEsSUFDVDtBQUFBLElBRUEsTUFBTTtBQUFBLE1BQ0YsQ0FBQyxRQUFRLElBQUk7QUFDVCxlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUFBLE1BQ0EsQ0FBQyxjQUFjLElBQUk7QUFDZixlQUFPO0FBQUE7QUFBQTtBQUFBLHVCQUdBLEtBQUssU0FBUyxDQUFDO0FBQUEsd0JBQ2QsS0FBSyxTQUFTLENBQUM7QUFBQTtBQUFBLE1BRTNCO0FBQUEsTUFDQSxDQUFDLGlCQUFpQixJQUFJO0FBQ2xCLGFBQUssVUFBVTtBQUFBLE1BQ25CO0FBQUEsSUFDSjtBQUFBLElBRUEsTUFBTSxpQkFBa0I7QUFDcEIsY0FBUSxJQUFJLG1CQUFtQjtBQUUvQixZQUFNLE9BQU8sS0FBSyxJQUFJLGNBQWMsaUJBQWlCO0FBQ3JELFdBQUssT0FBTztBQUFBLFFBQ1IsT0FBTyxLQUFLO0FBQUEsUUFDWixRQUFRLEtBQUs7QUFBQSxNQUNqQjtBQUVBLFdBQUssSUFBSSxpQkFBaUIsdUJBQXVCLENBQUMsVUFBVSxLQUFLLFNBQVMsS0FBSyxDQUFDO0FBQUEsSUFDcEY7QUFBQSxJQUVBLFVBQVUsU0FBVSxPQUFPO0FBQ3ZCLFdBQUssWUFBWTtBQUFBLFFBQ2IsT0FBTyxNQUFNLE9BQU87QUFBQSxRQUNwQixLQUFLLE1BQU0sT0FBTztBQUFBLE1BQ3RCO0FBQ0EsV0FBSyxVQUFVLE1BQU07QUFDakIsY0FBTSxVQUFVLE1BQU0sT0FBTyxRQUFRO0FBQ3JDLGNBQU0sVUFBVSxNQUFNLE9BQU8sUUFBUTtBQUNyQyxjQUFNLFFBQVEsTUFBTSxPQUFPLFFBQVE7QUFDbkMsY0FBTSxRQUFRLE1BQU0sT0FBTyxRQUFRO0FBRW5DLGNBQU0sVUFBVSxVQUFVLEtBQUssS0FBSyxRQUFRLE9BQU8sYUFDN0MsVUFBVSxLQUFLLEtBQUssUUFBUSxPQUFPLGFBQ25DO0FBQ04sY0FBTSxVQUFVLFVBQVUsS0FBSyxLQUFLLFNBQVMsT0FBTyxjQUM5QyxVQUFVLEtBQUssS0FBSyxTQUFTLE9BQU8sY0FDcEM7QUFFTixhQUFLLFNBQVMsSUFBSSxRQUFRO0FBQzFCLGFBQUssU0FBUyxJQUFJLFFBQVE7QUFDMUIsYUFBSyxPQUFPO0FBQUEsTUFDaEIsQ0FBQztBQUFBLElBQ0w7QUFBQSxJQUVBLFdBQVcsV0FBWTtBQUNuQixXQUFLLE9BQU87QUFBQSxJQUNoQjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
